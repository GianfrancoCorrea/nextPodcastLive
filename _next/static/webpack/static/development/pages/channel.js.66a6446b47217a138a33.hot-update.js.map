{"version":3,"file":"static/webpack/static/development/pages/channel.js.66a6446b47217a138a33.hot-update.js","sources":["webpack:///./pages/channel.jsx"],"sourcesContent":["import React from 'react';\nimport 'isomorphic-fetch';\nimport Layout from '../components/Layout';\nimport ChannelGrid from '../components/ChannelGrid';\nimport Error from './_error';\nimport PodcastListWithClick from '../components/PodcastListWithClick';\nimport PodcastPlayer from '../components/podcastPlayer';\nimport Audio from '../components/Audio';\nimport PropTypes from 'prop-types';\n\nexport default class Channel extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { openPodcast: null, minimized: false };\n    }\n\n    static async getInitialProps({ query, res }) {\n        try {\n            const idChannel = query.id;\n\n            const [requestChannel, requestSeries, requestAudios] = await Promise.all([\n                fetch(`https://api.audioboom.com/channels/${idChannel}`),\n                fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`),\n                fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n            ]);\n            if (requestChannel.status >= 404) {\n                res.statusCode = requestChannel.status;\n                return {\n                    channel: null, series: null, audioClips: null, statusCode: 404,\n                };\n            }\n\n            const dataChannel = await requestChannel.json();\n            const { channel } = dataChannel.body;\n\n            const dataSeries = await requestSeries.json();\n            const series = dataSeries.body.channels;\n\n            const dataAudios = await requestAudios.json();\n            const audioClips = dataAudios.body.audio_clips;\n\n            return {\n                channel, series, audioClips, statusCode: 200,\n            };\n        } catch (e) {\n            return {\n                channel: null, series: null, audioClips: null, statusCode: 503,\n            };\n        }\n    }\n\n    openPodcast = (event, podcast) => {\n        event.preventDefault();\n        this.setState({\n            openPodcast: podcast,\n        });\n    }\n\n    closePodcast = (event) => {\n        event.preventDefault();\n        this.setState({\n            minimized: true,\n        });\n    }\n\n    render() {\n        const {\n            channel, series, audioClips, statusCode,\n        } = this.props;\n        const { openPodcast, minimized } = this.state;\n\n        if (statusCode !== 200) {\n            return <Error statusCode={statusCode} />;\n        }\n\n        return (\n            <Layout title={channel.title}>\n                <div className=\"banner\" style={{ backgroundImage: `url(${channel.urls.banner_image.original})` }} />\n                <h1>{ channel.title }</h1>\n                { series.length > 0\n                    && (\n                        <div className=\"series\">\n                            <h2>Series</h2>\n                            <ChannelGrid channels={series} />\n                        </div>\n                    )\n                }\n                <div className=\"lastPodcasts\">\n                    <h2>Ultimos Podcasts</h2>\n                    <PodcastListWithClick podcasts={audioClips} onClickPodcast={this.openPodcast} />\n                </div>\n\n                {openPodcast\n                && (\n                    <PodcastPlayer\n                        clip={openPodcast}\n                        onClose={this.closePodcast}\n                        minimized={minimized}\n                    >\n                        <Audio\n                            clip={openPodcast}\n                            minimized={minimized}\n                            onClose={this.closePodcast}\n                        />\n                    </PodcastPlayer>\n                )}\n                <style jsx>\n                    {`\n                    .banner {\n                        width: 100%;\n                        padding-botconst 25%;\n                        background-consttion: 50% 50%;\n                        background-const: cover;\n                        background-constr: #aaa;\n                    }\n\n                    h1 {\n                        font-weight: 600;\n                        padding: 15px;\n                    }\n                    h2 {\n                       padding: 5px;\n                       font-size: 0.9em;\n                       font-weight: 600;\n                       margin: 0;\n                       text-align: center;\n                       }\n                `}\n\n                </style>\n            </Layout>\n        );\n    }\n}\nChannel.defaultProp = {\n    series: null,\n};\nChannel.propTypes = {\n    statusCode: PropTypes.number.isRequired,\n    audioClips: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    series: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyCA;AACA;AAAA;AACA;AADA;AAGA;AACA;AA9CA;AAgDA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAnDA;AAAA;AAAA;AAAA;AAFA;AAGA;AACA;;;AAkDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAvBA;AAAA;AAAA;AAwDA;;;;;;;;;;;;;AApHA;;AAEA;;AAEA;AACA;;;;AADA;AAAA;AAAA;AACA;AAIA;;;;;AACA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AACA;;;AAIA;AACA;;AADA;AACA;;AAEA;AACA;;AADA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AADA;AACA;;;;AAGA;AACA;AAAA;AAAA;AAAA;AADA;AACA;;;;;;;;;;;;;;;;;;AApCA;AACA;AADA;AA4HA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}